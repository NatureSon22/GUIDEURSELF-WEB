import { useState, useMemo, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import formatDate from "@/utils/formatDate";
import { getAllCampuses, getLowRoleTypes, getAllFeedback } from "@/api/component-info";
import { Button } from "@/components/ui/button";
import { GrPowerReset } from "react-icons/gr";
import Header from "@/components/Header";
import ComboBox from "@/components/ComboBox";
import DataTable from "@/components/DataTable";
import columns from "@/components/columns/FeedbackReport";
import Loading from "@/components/Loading";
import { LuDownload } from "react-icons/lu";
import jsPDF from "jspdf";
import "jspdf-autotable";
import PdfPreviewModal from "./PdfPreviewModal";
import { vectorUrl, logoUrl } from "./info.js";
import { loggedInUser } from "@/api/auth";
import { Input } from "@/components/ui/input";

const FeedbackReport = () => {
  const [filters, setFilters] = useState([]);
  const [globalFilter, setGlobalFilter] = useState("");
  const [reset, setReset] = useState(false);
  const [pdfPreviewUrl, setPdfPreviewUrl] = useState(null);
  const [fromDate, setFromDate] = useState(""); // New state for From date
  const [toDate, setToDate] = useState(""); // New state for To date

  const { data } = useQuery({
    queryKey: ["user"],
    queryFn: loggedInUser,
    refetchOnWindowFocus: false,
  });

  const { data: allFeedback, isLoading } = useQuery({
    queryKey: ["feedback"],
    queryFn: getAllFeedback,
  });

  const { data: allCampuses } = useQuery({
    queryKey: ["allCampuses"],
    queryFn: getAllCampuses,
  });

  const { data: allRoles } = useQuery({
    queryKey: ["allRoles"],
    queryFn: getLowRoleTypes,
  });

  const filteredFeedbacks = useMemo(() => {
    if (!allFeedback) return [];

    return allFeedback.filter((feedback) => {
      const matchesFilters = filters.every((filter) => {
        if (filter.value === "") return true;
        const feedbackValue = feedback[filter.id];
        return feedbackValue && feedbackValue.toLowerCase() === filter.value.toLowerCase();
      });

      const feedbackDate = new Date(feedback.date_submitted);
      const from = fromDate ? new Date(fromDate) : null;
      const to = toDate ? new Date(toDate) : null;

      const matchesDateRange =
        (!from || feedbackDate >= from) &&
        (!to || feedbackDate <= to);

      return matchesFilters && matchesDateRange;
    });
  }, [allFeedback, filters, fromDate, toDate]);

  const handleReset = () => {
    setFilters([]);
    setGlobalFilter("");
    setFromDate("");
    setToDate("");
    setReset(!reset);
  };

  const handleGeneratePDF = (preview = false) => {
    if (!filteredFeedbacks || filteredFeedbacks.length === 0) {
      alert("No data available to generate PDF.");
      return;
    }

    const doc = new jsPDF({ orientation: "landscape" });
    const today = new Date().toLocaleDateString("en-US");

    const imgWidth = 17; 
    const imgHeight = 18;

    const addHeader = () => {
      doc.addImage(logoUrl, "PNG", 83, 16, 16.5, 18.5);
  
      doc.setFontSize(15);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(80);
      doc.text("Republic of the Philippines", 96.3 + imgWidth + 10, 21);
    
      doc.setFontSize(17);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(60);
      doc.text("University of Rizal System", 90 + imgWidth + 10, 27.7);
    
      doc.setFontSize(12.5);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(80);
      doc.text("Nurturing Tomorrow's Noblest", 97.6 + imgWidth + 10, 33.3);
    
      doc.addImage(vectorUrl, "PNG", 210, 16, imgWidth, imgHeight);

    doc.setLineWidth(0.1);
    doc.line(14, 40, 285, 40);
    
    doc.setLineWidth(0.1);
    doc.line(14, 39.3, 285, 39.3);


    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text("Showing result of:", 0 + imgWidth + 0, 45);
  
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text(`Generated By: ${data.firstname} ${data.lastname}`, 0 + imgWidth + 0, 50);
    
    doc.setFontSize(10);    
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text(`Date Range: ${fromDate || today} - ${toDate || today} `, 0 + imgWidth + 0, 55);

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(60);
    doc.text("GUIDEURSELF", 107 + imgWidth + 10, 67);
    
    doc.setFontSize(13);    
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text("User Feedback Report", 104   + imgWidth + 10, 73);
    };

    const addFooter = (pageNumber) => {
      doc.line(14, 195, 285, 195);
      doc.setFontSize(10).setFont("helvetica", "normal").setTextColor(100);
      doc.text(`Page ${pageNumber} | Generated on: ${today}`, 232, 200);
      doc.text("CONFIDENTIAL - For internal use only", 14, 200);
    };

    addHeader();

    const tableData = filteredFeedbacks.map((feedback) => [
      feedback.user_number,
      feedback.username,
      feedback.firstname,
      feedback.lastname,
      feedback.role_type,
      feedback.campus_name,
      feedback.rating,
      feedback.comments,
      formatDate(feedback.date_submitted),
    ]);

    const rowsPerPage = 8;
    const totalPages = Math.ceil(tableData.length / rowsPerPage);

    for (let i = 0; i < totalPages; i++) {
      if (i > 0) {
        doc.addPage();
        addHeader();
      }

      const chunk = tableData.slice(i * rowsPerPage, (i + 1) * rowsPerPage);
      doc.autoTable({
        head: [["USER ID", "USERNAME", "FIRSTNAME", "LASTNAME", "USER TYPE", "CAMPUS", "RATING", "COMMENTS", "DATE SUBMITTED"]],
        body: chunk,
        startY: 80,
        didDrawPage: (data) => addFooter(doc.internal.getNumberOfPages()),
      });
    }

    if (preview) {
      const pdfBlob = doc.output("blob");
      const pdfUrl = URL.createObjectURL(pdfBlob);
      
      window.open(pdfUrl, '_blank');
    } else {
      doc.save("feedback_report.pdf");
    }
  };

  return (
    <div className="flex flex-1 flex-col gap-5">
      <Header
        title={"Feedback Report"}
        subtitle={"Access, review, and generate reports on user feedback."}
      />

      <div className="flex items-center gap-5">
        <p>Filters:</p>
        <Input type="date" className="w-[170px]" value={fromDate} onChange={(e) => setFromDate(e.target.value)} />
        <Input type="date" className="w-[170px]" value={toDate} onChange={(e) => setToDate(e.target.value)} />
        <ComboBox
          options={allRoles}
          placeholder="select user type"
          filter="role_type"
          setFilters={setFilters}
          reset={reset}
        />
        <ComboBox
          options={allCampuses}
          placeholder="select campus"
          filter="campus_name"
          setFilters={setFilters}
          reset={reset}
        />

        <Button
          className="text-secondary-100-75"
          variant="outline"
          onClick={handleReset}
        >
          <GrPowerReset /> Reset Filters
        </Button>

        <div className="ml-auto space-x-5">
          <Button variant="ghost" className="text-base-200" onClick={() => handleGeneratePDF(true)}>File Preview</Button>
          <Button className="border border-base-200 bg-base-200/10 text-base-200 hover:bg-base-200 hover:text-white" onClick={() => handleGeneratePDF(false)}>
            <LuDownload /> Download
          </Button>
        </div>
      </div>

      {isLoading ? (
        <Loading />
      ) : (
        <DataTable
          data={filteredFeedbacks} // Use filteredFeedbacks instead of allFeedback
          columns={columns}
          filters={filters}
          setFilters={setFilters}
          pageSize={11}
          globalFilter={globalFilter}
          setGlobalFilter={setGlobalFilter}
        />
      )}

      {pdfPreviewUrl && <PdfPreviewModal  pdfUrl={pdfPreviewUrl} onClose={() => setPdfPreviewUrl(null)} />}
    </div>
  );
};

export default FeedbackReport;