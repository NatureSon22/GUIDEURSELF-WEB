import Header from "@/components/Header";
import ComboBox from "@/components/ComboBox";
import { useState, useMemo, useEffect } from "react";
import { getMessages } from "@/api/message";
import { useQuery } from "@tanstack/react-query";
import formatDate from "@/utils/formatDate";
import { Button } from "@/components/ui/button";
import { GrPowerReset } from "react-icons/gr";
import DataTable from "@/components/DataTable";
import columns from "@/components/columns/MessageReport";
import Loading from "@/components/Loading";
import { LuDownload } from "react-icons/lu";
import jsPDF from "jspdf";
import "jspdf-autotable";
import PdfPreviewModal from "./PdfPreviewModal";
import { vectorUrl, logoUrl } from "./info.js";
import { loggedInUser } from "@/api/auth";
import { Input } from "@/components/ui/input";

const MessageReport = () => {
  const [filters, setFilters] = useState([]);
  const [globalFilter, setGlobalFilter] = useState("");
  const [reset, setReset] = useState(false);
  const [pdfPreviewUrl, setPdfPreviewUrl] = useState(null);
  const [fromDate, setFromDate] = useState(""); // New state for From date
  const [toDate, setToDate] = useState(""); // New state for To date

  const { data } = useQuery({
    queryKey: ["user"],
    queryFn: loggedInUser,
    refetchOnWindowFocus: false,
  });

  const { data: allMessages, isLoading, error } = useQuery({
    queryKey: ["messages"],
    queryFn: getMessages,
    refetchOnWindowFocus: false,
  });

  if (error) {
    console.error("Error fetching activity logs:", error);
  }

  const filteredMessages = useMemo(() => {
    if (!allMessages) return [];

    return allMessages.filter((message) => {
      const matchesFilters = filters.every((filter) => {
        if (filter.value === "") return true;
        const messageValue = message[filter.id];
        return messageValue && messageValue.toLowerCase() === filter.value.toLowerCase();
      });

      const messageDate = new Date(message.date);
      const from = fromDate ? new Date(fromDate) : null;
      const to = toDate ? new Date(toDate) : null;

      const matchesDateRange =
        (!from || messageDate >= from) &&
        (!to || messageDate <= to);

      return matchesFilters && matchesDateRange;
    });
  }, [allMessages, filters, fromDate, toDate]);

  const handleReset = () => {
    setFilters([]);
    setGlobalFilter("");
    setReset(!reset);
    setFromDate(""); // Clear From Date
    setToDate(""); // Clear To Date
  };

  const handleGeneratePDF = (preview = false) => {
    if (!filteredMessages || filteredMessages.length === 0) {
      alert("No data available to generate PDF.");
      return;
    }

    const doc = new jsPDF({ orientation: "landscape" });
    const today = new Date().toLocaleDateString("en-US");
    
    const imgWidth = 15; 
    const imgHeight = 15; 

    const addHeader = () => {
      doc.addImage(logoUrl, "PNG", 100, 16, imgWidth, imgHeight);
  
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(80);
      doc.text("Republic Of The Philippines", 98 + imgWidth + 10, 21);
    
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(60);
      doc.text("University of Rizal System", 90 + imgWidth + 10, 26.5);
    
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(80);
      doc.text("Nurturing Tomorrow's Noblest", 97 + imgWidth + 10, 32);
    
      doc.addImage(vectorUrl, "PNG", 187, 16, imgWidth, imgHeight);

    doc.setLineWidth(0.5);
    doc.line(14, 37, 285, 37);

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text("Showing result of:", 0 + imgWidth + 0, 45);
  
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text(`Generated By: ${data.firstname} ${data.lastname}`, 0 + imgWidth + 0, 50);
    
    doc.setFontSize(10);    
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text(`Date Range: ${fromDate || today} - ${toDate || today} `, 0 + imgWidth + 0, 55);

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(60);
    doc.text("GUIDEURSELF", 107 + imgWidth + 10, 77);
    
    doc.setFontSize(13);    
    doc.setFont("helvetica", "normal");
    doc.setTextColor(60);
    doc.text("Messages Report", 107   + imgWidth + 10, 83);


    };

    const addFooter = (pageNumber) => {
      doc.line(14, 195, 285, 195);
      doc.setFontSize(10).setFont("helvetica", "normal").setTextColor(100);
      doc.text(``, 140, 200);
      doc.text(`Page ${pageNumber} | Generated on: ${today}`, 232, 200);
      doc.text(`CONFIDENTIAL - For internal use only`, 14, 200);
    };

    addHeader();

    const tableData = filteredMessages.map((message) => [
        message.content,
        formatDate(message.date),
    ]);

    const rowsPerPage = 12;
    const totalPages = Math.ceil(tableData.length / rowsPerPage);

    for (let i = 0; i < totalPages; i++) {
      if (i > 0) {
        doc.addPage();
        addHeader();
      }

      const chunk = tableData.slice(i * rowsPerPage, (i + 1) * rowsPerPage);
      doc.autoTable({
        head: [["MESSAGE", "DATE CREATED"]],
        body: chunk,
        startY: 90,
        didDrawPage: (data) => addFooter(doc.internal.getNumberOfPages()),
      });
    }

    if (preview) {
      const pdfBlob = doc.output("blob");
      const pdfUrl = URL.createObjectURL(pdfBlob);
      setPdfPreviewUrl(pdfUrl);
    } else {
      doc.save("messages_report.pdf");
    }
  };

  return (
    <div className="flex flex-1 flex-col gap-5">
      <Header title="Messages Report" subtitle="Access, monitor, and generate reports on user messages" />

      <div className="flex flex-col gap-5">
        <div className="flex items-center gap-5">
          <p>Filters:</p>
          <Input type="date" className="w-[170px]" value={fromDate} onChange={(e) => setFromDate(e.target.value)} />
          <Input type="date" className="w-[170px]" value={toDate} onChange={(e) => setToDate(e.target.value)} />
          <Button className="text-secondary-100-75" variant="outline" onClick={handleReset}>
            <GrPowerReset /> Reset Filters
          </Button>
          <div className="ml-auto space-x-5">
            <Button variant="ghost" className="text-base-200" onClick={() => handleGeneratePDF(true)}>File Preview</Button>
            <Button className="border border-base-200 bg-base-200/10 text-base-200 hover:bg-base-200 hover:text-white" onClick={() => handleGeneratePDF(false)}>
              <LuDownload /> Download
            </Button>
          </div>
        </div>
      </div>

      {isLoading ? <Loading /> : <DataTable data={filteredMessages} columns={columns} filters={filters} setFilters={setFilters} pageSize={11} globalFilter={globalFilter} setGlobalFilter={setGlobalFilter} />}

      {pdfPreviewUrl && <PdfPreviewModal pdfUrl={pdfPreviewUrl} onClose={() => setPdfPreviewUrl(null)} />}
    </div>
  );
};

export default MessageReport;
